"""add_unified_activity_columns

Revision ID: 60d4d51d83f8
Revises: quality_tracking_001
Create Date: 2025-07-13 20:11:10.459876

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '60d4d51d83f8'
down_revision = 'quality_tracking_001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('discovered_tools_backup')
    op.add_column('discovered_tools', sa.Column('tool_type_detected', sa.String(), nullable=True))
    op.add_column('discovered_tools', sa.Column('activity_score', sa.Float(), nullable=True))
    op.add_column('discovered_tools', sa.Column('last_activity_check', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovered_tools', sa.Column('github_stars', sa.Integer(), nullable=True))
    op.add_column('discovered_tools', sa.Column('github_last_commit', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovered_tools', sa.Column('github_contributors', sa.Integer(), nullable=True))
    op.add_column('discovered_tools', sa.Column('npm_weekly_downloads', sa.Integer(), nullable=True))
    op.add_column('discovered_tools', sa.Column('npm_last_version', sa.String(), nullable=True))
    op.add_column('discovered_tools', sa.Column('npm_last_update', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovered_tools', sa.Column('pypi_downloads', sa.Integer(), nullable=True))
    op.add_column('discovered_tools', sa.Column('pypi_last_release', sa.DateTime(timezone=True), nullable=True))
    op.add_column('discovered_tools', sa.Column('is_actively_maintained', sa.Boolean(), nullable=True))
    op.add_column('discovered_tools', sa.Column('community_size_score', sa.Float(), nullable=True))
    op.add_column('discovered_tools', sa.Column('usage_popularity_score', sa.Float(), nullable=True))
    op.add_column('discovered_tools', sa.Column('maintenance_quality_score', sa.Float(), nullable=True))
    op.alter_column('discovered_tools', 'pricing',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index(op.f('idx_discovered_tools_category'), table_name='discovered_tools')
    op.drop_index(op.f('idx_discovered_tools_confidence'), table_name='discovered_tools')
    op.drop_index(op.f('idx_discovered_tools_created_at'), table_name='discovered_tools')
    op.drop_index(op.f('idx_discovered_tools_pricing'), table_name='discovered_tools')
    op.drop_index(op.f('idx_discovered_tools_tool_type_fast'), table_name='discovered_tools')
    op.drop_index(op.f('idx_discovered_tools_type_confidence'), table_name='discovered_tools')
    op.create_index(op.f('ix_discovered_tools_activity_score'), 'discovered_tools', ['activity_score'], unique=False)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_discovered_tools_activity_score'), table_name='discovered_tools')
    op.create_index(op.f('idx_discovered_tools_type_confidence'), 'discovered_tools', ['tool_type', sa.literal_column('confidence_score DESC')], unique=False)
    op.create_index(op.f('idx_discovered_tools_tool_type_fast'), 'discovered_tools', ['tool_type'], unique=False)
    op.create_index(op.f('idx_discovered_tools_pricing'), 'discovered_tools', ['pricing'], unique=False)
    op.create_index(op.f('idx_discovered_tools_created_at'), 'discovered_tools', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_discovered_tools_confidence'), 'discovered_tools', [sa.literal_column('confidence_score DESC')], unique=False)
    op.create_index(op.f('idx_discovered_tools_category'), 'discovered_tools', ['category'], unique=False)
    op.alter_column('discovered_tools', 'pricing',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('discovered_tools', 'maintenance_quality_score')
    op.drop_column('discovered_tools', 'usage_popularity_score')
    op.drop_column('discovered_tools', 'community_size_score')
    op.drop_column('discovered_tools', 'is_actively_maintained')
    op.drop_column('discovered_tools', 'pypi_last_release')
    op.drop_column('discovered_tools', 'pypi_downloads')
    op.drop_column('discovered_tools', 'npm_last_update')
    op.drop_column('discovered_tools', 'npm_last_version')
    op.drop_column('discovered_tools', 'npm_weekly_downloads')
    op.drop_column('discovered_tools', 'github_contributors')
    op.drop_column('discovered_tools', 'github_last_commit')
    op.drop_column('discovered_tools', 'github_stars')
    op.drop_column('discovered_tools', 'last_activity_check')
    op.drop_column('discovered_tools', 'activity_score')
    op.drop_column('discovered_tools', 'tool_type_detected')
    op.create_table('discovered_tools_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tool_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pricing', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('features', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('source_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###